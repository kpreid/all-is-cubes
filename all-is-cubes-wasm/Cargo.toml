[workspace]
# Excludes this from containing workspace; see top-level Cargo.toml for explanation

[package]
name = "all-is-cubes-wasm"
version = "0.7.0"
authors = ["Kevin Reid <kpreid@switchb.org>"]
edition = "2021"
rust-version = "1.79"
description = "Web client for the recursive voxel game All is Cubes."
# TODO: add homepage = "..." when we have one
repository = "https://github.com/kpreid/all-is-cubes"
license = "MIT OR Apache-2.0"
categories = ["games", "wasm"]
# Disable publishing for now because if I understand correctly, publishing this _Rust_ package is mostly useless as it leaves behind all of the JS/static stuff. It would only be useful if there was a need to build something *else* that depends on the Rust code but none of the JS.
publish = false

[lib]
# Disable running as benchmark so that the default doesn't interfere with Criterion usage.
bench = false
# There are some host-runnable unit tests (but we might move those...)
test = true
# Not a published library, so no doctests
doctest = false
# Need "cdylib" for the final wasm module, and "lib" for building tests
crate-type = ["lib", "cdylib"]

[dependencies]
all-is-cubes = { path = "../all-is-cubes", version = "0.7.0" }
all-is-cubes-content = { path = "../all-is-cubes-content", version = "0.7.0" }
all-is-cubes-gpu = { path = "../all-is-cubes-gpu", version = "0.7.0", features = ["wgpu"] }
all-is-cubes-port = { path = "../all-is-cubes-port", version = "0.7.0" }
all-is-cubes-render = { path = "../all-is-cubes-render", version = "0.7.0" }
all-is-cubes-ui = { path = "../all-is-cubes-ui", version = "0.7.0" }
console_log = "1.0.0"
console_error_panic_hook = "0.1.5"
form_urlencoded = "1.0.1"
futures-channel = "0.3.28"
futures-core = "0.3.28"
# Feature enabling for indirect dependency all-is-cubes → rand → getrandom,
# as well as our direct dependency
getrandom = { version = "0.2.7", features = ["js"] }
js-sys = "0.3.67"
log = { version = "0.4.17", default-features = false }
once_cell = "1.19.0"
rand = { version = "0.8.3", default-features = false, features = ["std", "std_rng"] }
send_wrapper = "0.6.0"
wasm-bindgen = "0.2.90"
wasm-bindgen-futures = "0.4.40"
web-time = { version = "1.0.0" }
# Must be the same version as in the main workspace, i.e. as in all-is-cubes-gpu.
wgpu = { version = "0.19.3", default-features = false, features = ["webgpu", "webgl"] }
# Feature enabling
yield-progress = { version = "0.1.6", features = ["log_hiccups"] }

[dependencies.web-sys]
version = "0.3.67"
features = [
  "console",
  "AddEventListenerOptions",
  "CssStyleDeclaration", # HTMLElement.style for dynamic styling
  "DataTransfer", # file drag-and-drop
  "DataTransferItem",  # file drag-and-drop
  "DataTransferItemList", # file drag-and-drop
  "Document",
  "DomTokenList", # classList
  "DragEvent", # file drag-and-drop
  "Element",
  "EventTarget",
  "File",  # file drag-and-drop - DataTransferItem.getAsFile()
  "FocusEvent",
  "HtmlCanvasElement",
  "HtmlElement",
  "HtmlProgressElement",
  "KeyboardEvent",
  "Location",
  "MouseEvent",
  "Text",
  "Window",
]

[dev-dependencies]
wasm-bindgen-test = "0.3"

[lints]
# rustc lints that are set to deny
rust.rust_2018_idioms = { level = "deny", priority = -1 }
rust.unsafe_op_in_unsafe_fn = "deny"

# rustc lints that are set to warn
rust.explicit_outlives_requirements = "warn"
rust.missing_debug_implementations = "warn"
rust.missing_docs = "warn"
rust.noop_method_call = "warn"
rust.redundant_lifetimes = "warn"
rust.trivial_casts = "warn"
rust.trivial_numeric_casts = "warn"
rust.unnameable_types = "warn"
rust.unused_extern_crates = "warn"
rust.unused_lifetimes = "warn"
rust.unused_qualifications = "warn"
# This lint has false positives on dev-dependencies. Occasionally turn it on to audit non-dev deps.
# rust.unused_crate_dependencies = "warn"

# clippy default lints that are set to allow
clippy.collapsible_else_if = "allow"
clippy.collapsible_if = "allow"
clippy.match_ref_pats = "allow"
clippy.needless_update = "allow"
clippy.single_match = "allow"

# clippy::pedantic lints that are set to allow
clippy.cast_possible_truncation = "allow" # we would need an alternative for intentional from-float saturation and to-float precision loss
clippy.cast_precision_loss = "allow" # consider enabling
clippy.cast_sign_loss = "allow" # consider enabling
clippy.default_trait_access = "allow"
clippy.enum_glob_use = "allow"
clippy.explicit_iter_loop = "allow" # I prefer the opposite style
clippy.float_cmp = "allow"
clippy.from_iter_instead_of_collect = "allow" # <https://github.com/rust-lang/rust-clippy/issues/7213>
clippy.if_not_else = "allow"
clippy.inline_always = "allow"
clippy.items_after_statements = "allow" # we use this sparingly
clippy.manual_assert = "allow"
clippy.many_single_char_names = "allow"
clippy.match_bool = "allow"
clippy.match_same_arms = "allow"
clippy.missing_errors_doc = "allow" # consider enabling
clippy.missing_panics_doc = "allow" # consider enabling
clippy.module_name_repetitions = "allow" # would use except for <https://github.com/rust-lang/rust-clippy/issues/8524>
clippy.must_use_candidate = "allow" # consider enabling
clippy.no_effect_underscore_binding = "allow"
clippy.range_plus_one = "allow" # https://github.com/rust-lang/rust-clippy/issues/3307
clippy.redundant_closure_for_method_calls = "allow" # consider enabling
clippy.redundant_else = "allow"
clippy.semicolon_if_nothing_returned = "allow"
clippy.similar_names = "allow"
clippy.single_match_else = "allow"
clippy.struct_excessive_bools = "allow"
clippy.too_many_lines = "allow"
clippy.unreadable_literal = "allow"
clippy.wildcard_imports = "allow" # we use this sparingly

# clippy::restriction lints that are set to allow (to note why we aren't using them)
clippy.shadow_unrelated = "allow" # would use except for <https://github.com/rust-lang/rust-clippy/issues/10780>

# clippy lints that are set to deny
clippy.should_panic_without_expect = "deny"

# clippy lints that are set to warn
clippy.pedantic = { level = "warn", priority = -1 }
clippy.assigning_clones = "warn"
clippy.cast_lossless = "warn"
clippy.cast_possible_wrap = "warn"
clippy.doc_markdown = "warn"
clippy.exhaustive_enums = "warn"
clippy.exhaustive_structs = "warn"
clippy.into_iter_without_iter = "warn"
clippy.inconsistent_struct_constructor = "warn"
clippy.infinite_loop = "warn"
clippy.iter_without_into_iter = "warn"
clippy.large_futures = "warn"
clippy.large_stack_frames = "warn"
clippy.manual_let_else = "warn"
clippy.map_unwrap_or = "warn"
clippy.missing_fields_in_debug = "warn"
clippy.modulo_arithmetic = "warn"
clippy.needless_pass_by_value = "warn"
clippy.option_as_ref_cloned = "warn"
clippy.pub_without_shorthand = "warn"
clippy.return_self_not_must_use = "warn"
clippy.suboptimal_flops = "warn"
clippy.trivially_copy_pass_by_ref = "warn"
clippy.undocumented_unsafe_blocks = "warn"
clippy.uninlined_format_args = "warn"
clippy.unnecessary_self_imports = "warn"
clippy.unnecessary_wraps = "warn"
clippy.unused_async = "warn"
clippy.wrong_self_convention = "warn"

# wasm-specific config
clippy.arc_with_non_send_sync = "allow"

[profile.dev]
# Enable some optimization to improve interactive performance in manual testing/experimenting.
# In particular, inlining is crucial.
opt-level = 2
# Yes, this is the default for dev, but I want to be precise here: overflow checks are enabled
# for ALL profiles. (Because not catching overflows in release mode is unwise when this is
# precisely where the program is *likely to encounter bigger numbers than in testing*.)
overflow-checks = true
# Faster builds at the cost of pathname-sensitive debug info.
split-debuginfo = "unpacked"

# For packages whose code is not as performance-critical, spend less time optimizing
package.all-is-cubes-content.opt-level = 1
package.all-is-cubes-port.opt-level = 1
package.all-is-cubes-ui.opt-level = 1

[profile.release]
# TODO: review recommended options for wasm releases
overflow-checks = true

[profile.test]
overflow-checks = true

[patch.crates-io]
# Here are some patches we might want to apply for development:
#
# wgpu = { git = "https://github.com/gfx-rs/wgpu/", branch = "trunk" }
