[workspace]
members = [
  "all-is-cubes",
  "all-is-cubes-content",
  "all-is-cubes-desktop",
  "all-is-cubes-mesh",
  "all-is-cubes-server",
  "all-is-cubes-ui",
  "all-is-cubes-wasm",
  "minvers-hack",
  "test-renderers",
  "xtask",

  # Including this makes the fuzz targets automatically built so we know they aren't broken.
  # But, `cargo test` sometimes ignores `[[bin]] test = false` directives,
  #     https://github.com/rust-lang/cargo/issues/8338
  # so doing this causes test failures in thise circumstances.
  # As a substitute, I've included explicitly building the fuzz targets in the `xtask` build process.
  # 
  # "fuzz",
]

# Use feature resolver version 2 (latest). (This must be specified explicitly
# in a workspace, but would be implicit in a single package with edition="2021".)
resolver = "2"

[workspace.dependencies]
anyhow = "1.0"
# Each use should be { optional = true }.
arbitrary = { version = "1.1.6", features = ["derive"] }
async_fn_traits = "0.1.1"
bitflags = "2.1.0"
# Note that this excludes the "derive" feature but some crates need it.
bytemuck = { version = "1.12.1", default-features = false }
# When upgrading clap, beware text output changes causing integration tests to fail.
clap = { version = "4.1.1", default-features = false, features = ["cargo", "deprecated", "derive", "help", "std", "suggestions", "usage", "wrap_help"] }
criterion = { version = "0.4.0", features = ["cargo_bench_support", "html_reports"] }
either = "1.8.0"
exhaust = "0.1.0"
futures-channel = { version = "0.3.24", default-features = false, features = ["alloc"] }
futures-core = { version = "0.3.17", default-features = false, features = ["alloc"] }
futures-task = { version = "0.3.17", default-features = false }
futures-util = { version = "0.3.21", default-features = false, features = ["alloc"] }
image = { version = "0.24.2", default-features = false }
indoc = "1.0.3"
instant = "0.1.12"
itertools = { version = "0.10.0", default-features = false, features = ["use_alloc"] }
log = { version = "0.4.14", default-features = false }
macro_rules_attribute = "0.1.0"
mutants = "0.0.3"
num-traits = "0.2.12"
once_cell = "1.4.1"
ordered-float = { version = "3.0.0", features = ["serde"] }
ouroboros = "0.15.0"
pretty_assertions = "1.2.0"
rand = { version = "0.8.2", default-features = false }
rand_xoshiro = "0.6.0"
rayon = { version = "1.3.1" }
send_wrapper = "0.6.0"
serde = { version = "1.0.126", default-features = false, features = ["derive"] }
serde_json = "1.0.64"
simplelog = "0.12.0"
strum = { version = "0.24.0", default-features = false, features = ["derive"] }
tempfile = "3.3.0"
thiserror = "1.0.22"
# Tokio is used for async test-running and for certain binaries.
# The library crates do not require Tokio.
tokio = { version = "1.18.0", default-features = false }
trycmd = "0.14.1"
wgpu = { version = "0.15.0" }

[profile.dev]
# Enable some optimization to improve interactive performance in manual testing/experimenting.
# In particular, inlining is crucial.
opt-level = 2
# Yes, this is the default for dev, but I want to be precise here: overflow checks are enabled
# for ALL profiles. (Because not catching overflows in release mode is unwise when this is
# precisely where the program is *likely to encounter bigger numbers than in testing*.)
overflow-checks = true
# Faster builds at the cost of pathname-sensitive debug info.
# TODO: Disabled for <https://github.com/rust-lang/rust/issues/103976> in CI
# split-debuginfo = "unpacked"

[profile.release]
# TODO: review recommended options for wasm releases
overflow-checks = true

[profile.test]
overflow-checks = true

[profile.bench]
overflow-checks = true

[patch.crates-io]
# Here are some patches we might want to apply for development:
#
# wgpu = { git = "https://github.com/gfx-rs/wgpu/", branch = "master" }
