[workspace]
members = [
  "all-is-cubes",
  "all-is-cubes-content",
  "all-is-cubes-desktop",
  "all-is-cubes-mesh",
  "all-is-cubes-server",
  "all-is-cubes-ui",
  "test-renderers",
  "tools/xtask",

  # Workspaces generally expect to be able to compile everything for the same target,
  # but all-is-cubes-wasm only compiles on wasm and all-is-cubes-desktop doesn't.
  # Specific advantages:
  # * The wasm workspace has Cargo config telling it to be built for wasm32-unknown-unknown,
  #   which rust-analyzer picks up, so all IDE assistance works.
  # 
  # Disadvantages, or advantages of the alternative of merely `cfg`-disabling all the wasm-only
  # code:
  # * `cargo fmt`, `cargo tree`, etc. don't work on this code (but `xtask` provides
  #   all-workspaces commands).
  #
  # "all-is-cubes-wasm",
  
  # Including this makes the fuzz targets automatically built so we know they aren't broken.
  # But, `cargo test` sometimes ignores `[[bin]] test = false` directives,
  #     https://github.com/rust-lang/cargo/issues/8338
  # so doing this causes test failures in thise circumstances.
  # As a substitute, I've included explicitly building the fuzz targets in the `xtask` build process.
  # 
  # "fuzz",
]

# Use feature resolver version 2 (latest). (This must be specified explicitly
# in a workspace, but would be implicit in a single package with edition="2021".)
resolver = "2"

[workspace.dependencies]
allocation-counter = "0.8.1"
anyhow = "1.0.70"
# Each use should be { optional = true }.
arbitrary = { version = "1.1.6", features = ["derive"] }
async_fn_traits = "0.1.1"
base64 = { version = "0.21.0", default-features = false }
bitflags = { version = "2.4", default-features = false }
# Note that this excludes the "derive" feature but some crates need it.
bytemuck = { version = "1.13.1", default-features = false }
cfg-if = { version = "1.0.0" }
# When upgrading clap, beware text output changes causing integration tests to fail.
clap = { version = "4.2.4", default-features = false, features = ["cargo", "deprecated", "derive", "help", "std", "suggestions", "usage", "wrap_help"] }
# Note: async_tokio feature is not needed globally but is enabled to avoid compiling two versions
# when benching/testing specific packages
criterion = { version = "0.5.1", features = ["async_tokio", "cargo_bench_support", "html_reports"] }
crossbeam-channel = { version = "0.5.8" }
displaydoc = { version = "0.2.4", default-features = false}
either = { version = "1.8.0", default-features = false }
exhaust = { version = "0.1.0", default-features = false }
futures-channel = { version = "0.3.28", default-features = false, features = ["alloc"] }
futures-core = { version = "0.3.28", default-features = false, features = ["alloc"] }
futures-task = { version = "0.3.28", default-features = false }
futures-util = { version = "0.3.28", default-features = false, features = ["alloc"] }
hashbrown = { version = "0.14.0", default-features = false, features = ["ahash", "inline-more"] }
image = { version = "0.24.6", default-features = false }
indoc = "2.0.1"
instant = "0.1.12"
itertools = { version = "0.11.0", default-features = false, features = ["use_alloc"] }
log = { version = "0.4.17", default-features = false }
macro_rules_attribute = "0.2.0"
manyfmt = "0.1.0"
mutants = "0.0.3"
num-traits = { version = "0.2.15", default-features = false }
once_cell = "1.18.0"
ordered-float = { version = "4.2.0", default-features = false }
polonius-the-crab = { version = "0.3.1" }
pretty_assertions = "1.2.0"
rand = { version = "0.8.2", default-features = false }
rand_xoshiro = "0.6.0"
rayon = { version = "1.8.0" }
re_log_types = { version = "0.11.0", default-features = false }
re_sdk = { version = "0.11.0", default-features = false }
re_types = { version = "0.11.0", default-features = false }
rendiff = { version = "0.1.0" }
send_wrapper = "0.6.0"
serde = { version = "1.0.160", default-features = false, features = ["derive"] }
serde_json = "1.0.79"
simplelog = "0.12.0"
snapbox = "0.4.11" # keep in sync with `trycmd`
strum = { version = "0.25.0", default-features = false, features = ["derive"] }
tempfile = "3.3.0"
thiserror = "1.0.40"
# Tokio is used for async test-running and for certain binaries.
# The library crates do not require Tokio.
tokio = { version = "1.28.0", default-features = false }
trycmd = "0.14.1" # keep in sync with `snapbox`
unicode-segmentation = { version = "1.10.1", default-features = false }
wasm-bindgen-futures = "0.4.34"
# Note: "expose_ids" feature is not needed globally but is enabled to avoid compiling two versions
wgpu = { version = "0.18.0", features = ["expose-ids"] }
yield-progress = { version = "0.1.4", default-features = false }

# Note: Lints are also necessarily redefined in the workspaces other than this one.
[workspace.lints]
rust.rust_2018_idioms = "deny"
rust.unsafe_op_in_unsafe_fn = "deny"

rust.explicit_outlives_requirements = "warn"
rust.missing_debug_implementations = "warn"
rust.missing_docs = "warn"
rust.noop_method_call = "warn"
rust.trivial_casts = "warn"
rust.trivial_numeric_casts = "warn"
rust.unused_extern_crates = "warn"
rust.unused_lifetimes = "warn"
rust.unused_qualifications = "warn"
# This lint has false positives on dev-dependencies. Occasionally turn it on to audit non-dev deps.
# rust.unused_crate_dependencies = "warn"

clippy.collapsible_else_if = "allow"
clippy.collapsible_if = "allow"
clippy.needless_update = "allow"
clippy.single_match = "allow"

clippy.cast_lossless = "warn"
clippy.doc_markdown = "warn"
clippy.exhaustive_enums = "warn"
clippy.exhaustive_structs = "warn"
clippy.modulo_arithmetic = "warn"
clippy.return_self_not_must_use = "warn"
clippy.should_panic_without_expect = "deny"
clippy.suboptimal_flops = "warn"
clippy.undocumented_unsafe_blocks = "warn"
clippy.uninlined_format_args = "warn"
clippy.unnecessary_self_imports = "warn"
clippy.unused_async = "warn"
clippy.wrong_self_convention = "warn"

[profile.dev]
# Enable some optimization to improve interactive performance in manual testing/experimenting.
# In particular, inlining is crucial.
opt-level = 2
# Yes, this is the default for dev, but I want to be precise here: overflow checks are enabled
# for ALL profiles. (Because not catching overflows in release mode is unwise when this is
# precisely where the program is *likely to encounter bigger numbers than in testing*.)
overflow-checks = true
# Faster builds at the cost of pathname-sensitive debug info.
# TODO: Disabled for <https://github.com/rust-lang/rust/issues/103976> in CI
# split-debuginfo = "unpacked"

# For packages whose code is not as performance-critical, spend less time optimizing
package.all-is-cubes-content.opt-level = 1
package.all-is-cubes-port.opt-level = 1
package.all-is-cubes-server.opt-level = 1
package.all-is-cubes-ui.opt-level = 1
package.test-renderers.opt-level = 1

[profile.release]
# TODO: review recommended options for wasm releases
overflow-checks = true

[profile.test]
overflow-checks = true

[profile.bench]
overflow-checks = true

[patch.crates-io]
# Here are some patches we might want to apply for development:
#
# wgpu = { git = "https://github.com/gfx-rs/wgpu/", branch = "master" }
