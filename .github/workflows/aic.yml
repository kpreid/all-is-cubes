name: AIC Build, Test, Deploy

permissions: {}

on:
  push:
    branches: [ main, pages-alt ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        include:
          - toolchain: stable
            depversions: locked
          - toolchain: nightly
            depversions: locked
          - toolchain: stable
            depversions: latest
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
          toolchain: ${{ matrix.toolchain }}
          target: wasm32-unknown-unknown
          override: true
          components: rustfmt, clippy

    - name: Install native libraries
      run: |
          sudo apt update
          sudo apt-get -y install libxrandr-dev xorg-dev libglfw3-dev 
    
    - name: Update dependencies
      if: ${{ matrix.depversions == 'latest' }}
      run: cargo update

    - uses: Swatinem/rust-cache@v1

    - name: Install wasm-pack
      # Use workspace target directory for cargo install's build,
      # so that the build of wasm-pack will be cached by rust-cache action.
      run: CARGO_TARGET_DIR=`pwd`/target cargo install wasm-pack

    # Run tests in `test-more` mode in the "normal" matrix configuration, and
    # run them in the faster mode (which does not try disabling/enabling
    # features) for all other variations.
    # This is because the exhaustive tests are intended to catch bugs in our own
    # code (a miswritten `cfg` or similar), and the testing against nightly and
    # latest versions is intended to catch bugs in *our dependencies*; and the
    # two are sufficiently unlikely to interact that it doesn't seem worth
    # spending the CI latency to do both.
    - name: Run basic tests
      if: ${{ !(matrix.toolchain == 'stable' && matrix.depversions == 'locked') }}
      run: cargo xtask test
    - name: Run exhaustive tests
      if: ${{ matrix.toolchain == 'stable' && matrix.depversions == 'locked' }}
      run: cargo xtask test-more
    # Unlike the above, we *do* run lint against all versions because future
    # warnings might be interesting.
    - name: Lint
      run: cargo xtask lint
    
    # Save wasm build so that we can optionally deploy it without rebuilding
    # (but only for the stablest matrix version)
    - name: Save wasm dist artifact
      if: ${{ matrix.toolchain == 'stable' && matrix.depversions == 'locked' }}
      uses: actions/upload-artifact@v2
      with:
        name: wasm-dist
        path: all-is-cubes-wasm/dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    # Do this only if we are pushing to main, not to pull requests.
    # (Or if we're on a special 'pages-alt' branch, so we can experiment with
    # deployment before pushing to main.)
    #
    # Caution: GitHub's parsing is weird around multiline expressions so just don't.
    # https://github.community/t/how-to-write-multi-line-condition-in-if/128477
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/pages-alt') }}

    steps:
    - name: Download wasm dist artifact
      uses: actions/download-artifact@v2
      with:
        name: wasm-dist
        path: dist-for-deploy
    - name: Deploy to GitHub Pages
      uses: crazy-max/ghaction-github-pages@v2
      with:
        target_branch: gh-pages
        build_dir: dist-for-deploy
        keep_history: false
        jekyll: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  fuzz:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    # Cache the target/ dir (for xtask).
    - uses: Swatinem/rust-cache@v1
      with:
        key: main
    # Cache the fuzz/target/ dir where the actual fuzz targets are built.
    - uses: Swatinem/rust-cache@v1
      with:
        # additional key to distinguish ./fuzz/target from ./target
        key: fuzz
        target-dir: ./fuzz/target

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
          toolchain: nightly
          override: true

    - name: Install cargo-fuzz
      run: cargo install cargo-fuzz

    - name: Cache fuzzer corpus
      uses: actions/cache@v3
      with:
        key: fuzz-corpus
        path: |
          fuzz/corpus

    - name: Fuzz
      # Note: The specified timeout value is per-fuzz-target; as of this writing
      # there are 6 fuzz targets and so the total time will be 720 seconds = 12 minutes.
      run: cargo xtask fuzz 120
