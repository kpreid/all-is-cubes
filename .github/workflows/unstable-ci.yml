# This version of the CI workflow is for the `unstable-rust` branch that uses Rust
# nightly exclusively, for the sake of testing unstable features in the Rust compiler.
#
# It is stored in the main branch because only the main branch gets *scheduled* runs.
# Scheduled runs are performed so that code is regularly re-tested on new nightlies.
#
# Differences from `ci.yml`:
# 
# * matrix is 100% nightly
# * no fuzzing
# * no deployment
# * no testing of multiple feature configurations
# * no concept of a "primary" matrix configuration
# * no separate lint job

name: Unstable Rust Features

permissions: {}

on:
  pull_request:
    branches:
      - unstable-rust
  workflow_dispatch:
  schedule:
    - cron: '43 14 * * 1'
  push:
    branches:
      - unstable-rust
      - ci

# Cancel previous workflows when a push triggers a new one.
# This idea and implementation taken from <https://github.com/gfx-rs/wgpu/pull/7958>.
concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  # Disable incremental compilation because we aren't caching incremental compilation
  # artifacts, so they won't be useful for anything (other than maybe the exhaustive
  # builds with different features).
  CARGO_INCREMENTAL: 0
  # Collect backtrace on panic.
  RUST_BACKTRACE: 1
  # Tell `anyhow` *not* to collect backtraces for errors.
  # <https://users.rust-lang.org/t/anyhow-backtraces/107437>
  RUST_LIB_BACKTRACE: 0
  # This will cause a test to fail if it has a dependence on a system/user config file.
  AIC_DO_NOT_USE_CONFIG_FILES_IN_TESTS: 1

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu
            toolchain: nightly
            depversions: locked

          # Windows
          - os: windows
            toolchain: nightly
            depversions: locked

          # macOS
          - os: macos
            toolchain: nightly
            depversions: locked

    runs-on: ${{ matrix.os }}-latest

    steps:
    - uses: actions/checkout@v4
      with:
        ref: unstable-rust

    # Load cache before doing any Rust builds
    - uses: Swatinem/rust-cache@v2.8.0
      with:
        # This is not necessary for keying, but makes the GHA cache viewing page more helpful.
        prefix-key: "v1-rust-unstablefeatures-${{ matrix.os }}-${{ matrix.depversions }}"
        shared-key: "build"
        workspaces: |
          ./
          all-is-cubes-wasm/

    - name: Install tools
      # Note: we do this before setting the toolchain so that we still use stable for these tools.
      # Note: Swatinem/rust-cache will cache these installed binaries, so we don't have to worry
      # about caching the builds of them.
      run: |
        cargo install --locked wasm-pack@0.13.1 cargo-about@0.6.1

    - name: Set Rust toolchain
      # The rust-toolchain.toml file specifies the targets and components we need,
      # but we may want to override the toolchain.
      if: ${{ matrix.toolchain != 'stable' }}
      run: perl -pi -e "s/stable/${{ matrix.toolchain }}/" rust-toolchain.toml

    - name: Install Rust toolchain
      run: rustup show active-toolchain || rustup toolchain install

    - name: Install native libraries
      if: ${{ runner.os == 'Linux' }}
      run: |
          sudo apt update
          sudo apt-get -y install libxrandr-dev xorg-dev libx11-xcb-dev libwayland-dev libasound2-dev libudev-dev
      # libxrandr-dev xorg-dev libx11-xcb-dev libwayland-dev: needed for windowing
      # Note that `libwayland-dev` provides the library called `wayland-client`
      # libasound2-dev: needed for audio via `kira`
      # libudev-dev: needed for gamepad input via `gilrs`

    # break this out as a separate non-silenced build step
    - name: Compile xtask
      run: cargo build --package xtask

    - name: Update dependencies
      run: |
        cargo xtask update "${{ matrix.depversions }}"
        cargo tree --all-features

    - name: Compile tests
      # compile is broken out so we have visibility into compile vs. run times
      run: cargo xtask --scope=only-normal test --timings --no-run
    - name: Run tests
      run: cargo xtask --scope=only-normal test --timings

    # Save the test-renderers results so we can download and view them
    - name: Save test-renderers output
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: test-renderers-output ${{ matrix.os }} ${{ matrix.toolchain }} ${{ matrix.depversions }}
        path: |
          target/test-renderers-output/

    - name: Lint
      run: cargo xtask --scope=only-normal lint --timings

    # Save timing reports so we can download and view them
    # (for understanding build performance in CI)
    - name: Save cargo --timings output
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: cargo-timings ${{ matrix.os }} ${{ matrix.toolchain }} ${{ matrix.depversions }}
        path: |
          target/cargo-timings/cargo-timing-*.html

  # Run `xtask lint`.
  #
  # This job is separate from the main "build" job so that:
  # * Lint results are delivered quickly by running them in parallel with other jobs.
  # * We build with `-Dwarnings` so the failures aren't silent, but don't want this to
  #   cause *re*building in the main build job and its cache.
  lint:
    strategy:
      fail-fast: false
      matrix:
        toolchain: ["nightly"]

    runs-on: ubuntu-latest
    continue-on-error: false

    env:
      RUSTFLAGS: "-Dwarnings"

    steps:
    - uses: actions/checkout@v4

    - uses: Swatinem/rust-cache@v2.8.0
      with:
        # We cannot reuse the cache from the `build` job, because `RUSTFLAGS=-Dwarnings`
        # would invalidate all cached artifacts anyway.
        prefix-key: "v1-rust-unstablefeatures-${{ matrix.toolchain }}"
        shared-key: "lint"
        # Job's likely to fail and yet have useful cache material.
        cache-on-failure: true
        workspaces: |
          ./
          all-is-cubes-wasm/

    - name: Install tools
      run: |
        cargo install --locked wasm-pack@0.13.1

    - name: Set Rust toolchain
      # The rust-toolchain.toml file specifies the targets and components we need,
      # but we may want to override the toolchain.
      if: ${{ matrix.toolchain != 'stable' }}
      run: perl -pi -e "s/stable/${{ matrix.toolchain }}/" rust-toolchain.toml

    - name: Install Rust toolchain
      run: rustup show active-toolchain || rustup toolchain install

    - name: Install native libraries
      if: ${{ runner.os == 'Linux' }}
      run: |
          sudo apt update
          sudo apt-get -y install libxrandr-dev xorg-dev libx11-xcb-dev libwayland-dev libasound2-dev libudev-dev

    # break this out as a separate non-silenced build step
    - name: Compile xtask
      run: cargo build --package xtask

    - name: Lint
      run: cargo xtask --scope=all lint --timings

    - name: Save cargo --timings output
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: cargo-timings lint ${{ matrix.toolchain }}
        path: |
          target/cargo-timings/cargo-timing-*.html

  miri:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - uses: Swatinem/rust-cache@v2.8.0
      with:
        # This is not necessary for keying, but makes the GHA cache viewing page more helpful.
        prefix-key: "v1-rust-unstablefeatures-ubuntu-locked"

    - name: Install Rust toolchain
      run: |
        rustup toolchain install nightly --component miri

    - name: Run Miri tests
      # `universe::owning_guard` is the only module that contains nontrivial unsafe code,
      # and the tests in `universe` are those most worth running to exercise it.
      run: |
        cargo +nightly miri test --no-default-features -p all-is-cubes universe::
