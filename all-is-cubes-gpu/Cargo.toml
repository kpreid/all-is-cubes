[package]
name = "all-is-cubes-gpu"
version = "0.9.0"
authors.workspace = true
edition.workspace = true
rust-version.workspace = true
description = "GPU rendering of all-is-cubes voxel scenes using wgpu. Can be used for headless rendering."
# TODO: add homepage = "..." when we have one
repository.workspace = true
license = "MIT OR Apache-2.0"
# TODO: revisit categories once it's more settled how useful this is as an engine
categories = ["games", "graphics", "rendering", "rendering::engine"]
keywords = ["all-is-cubes", "voxel", "wgpu"]

[package.metadata.docs.rs]
all-features = true

[lib]
# Disable running as benchmark so that the default doesn't interfere with Criterion usage.
bench = false
# Disable doctest running (we have none) to reduce total noise in `cargo test` output.
doctest = false

[[test]]
name = "shaders"
required-features = ["wgpu"]

[[bench]]
name = "wgpu"
harness = false
required-features = ["wgpu", "_special_testing"]

[features]
# Adds support for render info logging to Rerun.
rerun = ["all-is-cubes/rerun", "all-is-cubes-mesh/rerun"]
# Enable wgpu support.
# (The library is useless without this, but we used to have multiple GPU API support
# and I don't want to go entirely deleting it quite yet.)
wgpu = ["dep:wgpu"]
# Adds automatic parallelism to some algorithms.
# If disabled, `std::thread` is never used.
# If enabled, threads may be created and the active `rayon` thread pool may be used.
auto-threads = [
    "dep:rayon",
    # this cascade is not mandatory, but almost certainly wanted
    "all-is-cubes-mesh/auto-threads",
    "all-is-cubes-render/auto-threads",
]
# Makes certain internal items public.
# This feature is intended only for use when developing All is Cubes,
# to compile certain fuzzing, benchmark, and example targets.
# It is not necessary to enable this feature to run the complete `cargo test` test suite.
_special_testing = ["dep:visibility"]

[dependencies]
all-is-cubes = { workspace = true, features = ["std"] }
all-is-cubes-mesh = { workspace = true, public = true, features = ["dynamic"] }
all-is-cubes-render = { workspace = true, public = true, features = ["raytracer"] }
# Public when used in shader tests
bytemuck = { workspace = true, public = true, features = ["derive"] }
# Used to implement start_polling(). Also a `wgpu` dependency already.
flume = { workspace = true }
futures-channel = { workspace = true, features = ["sink"] }
futures-core = { workspace = true }
futures-util = { workspace = true, features = [
    "async-await", # needed for select!
    "async-await-macro", # needed for select!
    "std", # needed for select!
    "sink"
] }
# f16 support for working with floating point textures.
half = { workspace = true, features = ["bytemuck"] }
hashbrown = { workspace = true }
itertools = { workspace = true }
log = { workspace = true }
num-traits = { workspace = true }
# Used to implement start_polling() on non-Wasm targets, and in the `rerun` support.
pollster = { workspace = true }
rand = { workspace = true }
rand_xoshiro = { workspace = true }
rayon = { workspace = true, optional = true }
resource = "0.6.0"
send_wrapper = { workspace = true, features = ["futures"] }
visibility = { workspace = true, optional = true }
wasm-bindgen-futures = { workspace = true }
# For initializing tests on web. (This is not a dev-dependency because some of said tests are not in this package.)
web-sys = { version = "0.3.77", features = ["OffscreenCanvas"] }
web-time = { workspace = true }
# std feature is needed for `wgpu::util::StagingBelt`
# wgsl feature is needed because our shaders are written in WGSL
wgpu = { workspace = true, optional = true, public = true, features = ["std", "wgsl"] }

[target.'cfg(target_family = "wasm")'.dependencies]
# Used in the `poll` module to implement timeout
gloo-timers = { version = "0.3.0", default-features = false, features = ["futures"]}
# If we don't set this feature, it will try to access files at run time and fail
# since web wasm has no std::fs.
resource = { version = "0.6.0", features = ["force-static"] }

[dev-dependencies]
# Using smol for async test-running.
async-io = { workspace = true }
# Provides async OnceCell
async-lock = { workspace = true, features = ["std"] }
criterion = { workspace = true }
# Used in shader tests. TODO: Not really necessary
image = { workspace = true }
macro_rules_attribute = { workspace = true }
rstest = { workspace = true }
# Used in benchmark
scopeguard = { workspace = true }
# Using smol for async test-running.
# TODO: Consider defining our own macros and stripping down the dependencies.
smol-macros = { workspace = true }
# Enable wgpu backends for tests, by enabling default features.
wgpu = { workspace = true, default-features = true, features = ["noop"] }


[lints]
workspace = true
