[package]
name = "test-renderers"
authors.workspace = true
edition.workspace = true
rust-version.workspace = true
description = "Rendering tests for all-is-cubes."
publish = false

# Tests use a custom test harness; among other reasons, we want to explicitly skip the
# tests if there is no GPU on the system rather than just making them “pass” falsely.

[lib]
doctest = false
# Disable running as benchmark so that the default doesn't interfere with Criterion usage.
bench = false

[[bin]]
name = "bless-render"
test = false
doctest = false
bench = false

[[test]]
name = "gltf-render"
doctest = false
harness = false
test = false # Exclude from normal test runs because it does not pass yet!
required-features = ["gltf"]

[[test]]
name = "ray-render"
doctest = false
harness = false

[[test]]
name = "wgpu-render"
doctest = false
harness = false

[[test]]
name = "ui"
doctest = false
harness = false

[features]
default = ["auto-threads"]
# This is a feature so that, if we want to, we can test the non-threaded build.
auto-threads = [
    "all-is-cubes/auto-threads",
    "all-is-cubes-gpu/auto-threads",
    "all-is-cubes-port/auto-threads",
    "all-is-cubes-render/auto-threads",
]
gltf = [
    "dep:all-is-cubes-port",
    "dep:bytemuck",
    "tokio/fs",
]

[dependencies]
all-is-cubes = { workspace = true, features = ["save"] }
all-is-cubes-content = { workspace = true }
all-is-cubes-gpu = { workspace = true, features = ["wgpu"] }
# used only for gltf export+render tests
all-is-cubes-port = { workspace = true, optional = true, features = ["export", "gltf"] }
all-is-cubes-render = { workspace = true, public = true, features = ["raytracer", "std"] }
all-is-cubes-ui = { workspace = true, features = ["session"] }
anyhow = { workspace = true }
async_fn_traits = { workspace = true, public = true }
bytemuck = { workspace = true, optional = true }
# Using clap for parsing test command-line arguments
clap = { workspace = true, public = true }
exhaust = { workspace = true }
futures-core = { workspace = true }
#futures-channel = { workspace = true, optional = true }
futures-util = { workspace = true, features = ["std"] }
image = { workspace = true, features = ["png"] }
imgref = { workspace = true }
itertools = { workspace = true }
log = { workspace = true }
# Used to compress images when those images are to be stored in the repository.
oxipng = { version = "=9.1.3", default-features = false, features = ["parallel", "zopfli"] }
rendiff = { workspace = true }
send_wrapper = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
simplelog = { workspace = true }
tempfile = { workspace = true }
time = { workspace = true }
# tinytemplate is already in the workspace's dependency tree via criterion,
# so let's use it for our output report template.
tinytemplate = "1.2.1"
# Using tokio for async test-running.
tokio = { workspace = true, features = ["macros", "rt", "rt-multi-thread", "parking_lot", "sync", "time"] }
# In addition to depending on wgpu directly, we also need to enable backends for the tests to
# actually find an adapter. Enabling default features suffices (as of wgpu 24.0).
wgpu = { workspace = true, default-features = true }

[lints]
workspace = true
