[package]
name = "all-is-cubes"
version = "0.9.0"
authors.workspace = true
edition.workspace = true
rust-version.workspace = true
repository.workspace = true
description = "Recursive voxel game engine. Can be used for voxel raytracing."
license = "MIT OR Apache-2.0"
# TODO: revisit categories once it's more settled how useful this is as a game engine
categories = ["games", "graphics", "rendering::engine"]
keywords = ["all-is-cubes", "voxel"]

[package.metadata.docs.rs]
features = ["arbitrary", "save", "std"]

[lib]
# Disable running as benchmark so that the default doesn't interfere with Criterion usage.
bench = false

[[bench]]
name = "block"
harness = false

[[bench]]
name = "chunk"
harness = false

[[bench]]
name = "light"
harness = false
required-features = ["_special_testing"]

[[bench]]
name = "raycast"
harness = false

[[bench]]
name = "save"
harness = false
required-features = ["save"]

[[bench]]
name = "space"
harness = false

[[example]]
name = "light-tree"
required-features = ["rerun", "_special_testing"]

[[example]]
name = "visualize-raycast"
required-features = ["rerun"]

# See src/lib.rs documentation for more details on features.
[features]
default = ["std"]
# Adds std-dependent functionality such as thread safety.
std = [
    # TODO(no_std): make these dep features conditional on our std feature again when possible
    # "all-is-cubes-base/std",
    "arcstr/std", # not required but nicer behavior
    # "once_cell/std", # used conditionally as more efficient than once_cell::race
    # "nosy/sync",
    # "yield-progress/sync",
]
# Adds `impl arbitrary::Arbitrary for ...`
arbitrary = [
    "dep:arbitrary",
    "all-is-cubes-base/arbitrary",
    "euclid/arbitrary",
    "ordered-float/arbitrary",
]
# Adds serde implementations.
save = [
    "std", # TODO: Eliminate dependency on std (requires replacing flate2)
    "dep:base64", # encoded compressed data
    "dep:flate2", # compression
    "dep:serde",
    "all-is-cubes-base/serde",
    "bitflags/serde", # serialize for util::ShowStatus
    "bytemuck/extern_crate_std", # impl Error for CheckedCastError
    "ordered-float/serde",
]
# Adds rerun logging support
rerun = [
    "std",
    "dep:re_log_types",
    "dep:re_sdk",
    "dep:re_types",
    "all-is-cubes-base/rerun",
]
# Adds automatic parallelism to some algorithms.
# If disabled, `std::thread` is never used.
# If enabled, threads may be created and the global `rayon` thread pool may be used.
auto-threads = [
    "std",
    "dep:rayon",
    "bevy_ecs/multi_threaded",
    "bevy_ecs/std", # shouldn't be necessary
    "bevy_ecs/async_executor", # shouldn't be necessary
]
# Makes certain internal items public.
# This feature is intended only for use when developing All is Cubes,
# to compile certain fuzzing, benchmark, and example targets.
# It is not necessary to enable this feature to run the complete `cargo test` test suite.
_special_testing = ["all-is-cubes-base/_special_testing", "dep:visibility"]

[dependencies]
all-is-cubes-base = { workspace = true, features = ["std"] } # TODO(no_std): make "std" conditional on our std feature again when possible
arbitrary = { workspace = true, optional = true }
arcstr = { version = "1.2.0", default-features = false, features = ["serde", "substr"] }
arrayvec = { workspace = true }
base64 = { workspace = true, optional = true, features = ["std"] } # used in serialization
bevy_ecs = { workspace = true }
bevy_platform = { workspace = true }
bitflags = { workspace = true }
bytemuck = { workspace = true, features = ["derive"] }
cfg-if = { workspace = true }
displaydoc = { workspace = true }
# mint feature to guarantee that our callers can use mint types
# libm feature to guarantee compilability and compatibility with no_std
euclid = { workspace = true, default-features = false, features = ["libm", "mint"] }
embedded-graphics = { workspace = true }
exhaust = { workspace = true, default-features = false }
flate2 = { version = "1.0.35", optional = true }
futures-core = { workspace = true }
hashbrown = { workspace = true }
indoc = { workspace = true }
itertools = { workspace = true }
libm = { workspace = true }
log = { workspace = true }
macro_rules_attribute = { workspace = true }
manyfmt = { workspace = true }
mutants = { workspace = true }
nosy = { workspace = true, features = ["async", "sync"] } # TODO(no_std): make "std" conditional on our std feature again when possible
num-traits = { workspace = true }
once_cell = { workspace = true, features = ["alloc", "race", "std"] } # TODO(no_std): make "std" conditional on our std feature again when possible
ordered-float = { workspace = true }
paste = { workspace = true }
png-decoder = { workspace = true }
rand = { workspace = true, features = ["small_rng"] }
rand_distr = { workspace = true }
rand_xoshiro = { workspace = true }
rayon = { workspace = true, optional = true }
# re_sdk is a data-logging and visualization tool; we are currently using it _only_ for
# development of All is Cubes itself.
re_log_types = { workspace = true, optional = true }
re_sdk = { workspace = true, optional = true }
re_types = { workspace = true, optional = true }
rustc-hash = { workspace = true }
# rc feature needed because we are [de]serializing `Arc`s
# alloc feature needed for #[serde(flatten)] â€” https://github.com/serde-rs/serde/issues/1935
serde = { workspace = true, optional = true, features = ["alloc", "derive", "rc"] }
unicode-segmentation = { workspace = true }
visibility = { workspace = true, optional = true }
yield-progress = { workspace = true, features = ["sync"] } # TODO(no_std): make "std" conditional on our std feature again when possible

[dev-dependencies]
allocation-counter = { workspace = true }
# Using smol for async test-running.
async-io = { workspace = true }
criterion = { workspace = true }
futures-util = { workspace = true }
pretty_assertions = { workspace = true }
rstest = { workspace = true }
serde_json = { workspace = true }
# Using smol for async test-running.
# TODO: Consider defining our own macros and stripping down the dependencies.
smol-macros = { workspace = true }

[lints]
workspace = true
